lines <- readLines(file)
# Split lines into name and value parts, assuming each line is "MetricName\tMetricValue"
data <- sapply(lines, function(line) {
parts <- strsplit(line, "\t")[[1]]
if (length(parts) == 2) {
parts[2]  # Extract the metric value
} else {
NA  # Handle any irregular lines
}
})
# Create a named vector for easy conversion to a data frame row
names(data) <- sapply(lines, function(line) strsplit(line, "\t")[[1]][1])
data <- c(FileName = basename(file), data)  # Add the file name
# Convert to data frame with one row
as.data.frame(t(data), stringsAsFactors = FALSE)
}
# Apply the function to each file and combine results
df <- do.call(rbind, lapply(file_list, process_file))
# Display the dataframe
df <- type_convert(df)  # Optional: Convert columns to appropriate types
# Clean column names
clean_names <- function(names) {
names <- gsub("\\s+", " ", names)       # Replace multiple spaces with a single space
names <- gsub("\\|", "", names)         # Remove |
names <- gsub("%", "percent", names)    # Replace % with 'percent'
names <- gsub(":", "", names)           # Remove colons
names <- gsub("^\\s+|\\s+$", "", names) # Trim leading and trailing whitespace
names <- make.names(names, unique = TRUE) # Make syntactically valid names
return(names)
}
# Apply this function to the data frame column names
colnames(df) <- clean_names(colnames(df))
# Remove "Log.final.out" from each entry in the FileName column
# df$FileName <- sub("Log.final.out$", "", df$FileName)
df$FileName <- sub("_Log.final.out$", "", df$FileName)
# Load the metadata
metadata <- read.csv("C:/Users/jonan/Documents/1Work/RoseLab/bulkRNAseq_32samples/data/metadata_short.csv")
# Rename the 'FileName' column in 'df' to 'TGen_Sample_ID' for merging
df <- merge(df, metadata[, c("TGen_Sample_ID", "Sample_ID")],
by.x = "FileName", by.y = "TGen_Sample_ID", all.x = TRUE)
# Rename the 'Sample_ID' column to 'SampleID' in the merged df
names(df)[names(df) == "Sample_ID"] <- "SampleID"
#--------------------------Histogram of percent unqiue------------------------#
# Remove the "%" symbol and convert to numeric
df$Uniquely.mapped.reads.percent <- as.numeric(sub("%", "", df$Uniquely.mapped.reads.percent))
# write.csv(df, "C://Users/jonan/Documents/1Work/RoseLab/bulkRNAseq_32samples/Figures/final.log.out/unclean_alignment_data.csv")
write.csv(df, "C://Users/jonan/Documents/1Work/RoseLab/bulkRNAseq_32samples/data/STAR_clean_fast/clean_alignment_data.csv")
ggplot(df, aes(x = SampleID, y = Uniquely.mapped.reads.percent)) +
geom_bar(stat = "identity") +
theme_bw() +  # White background
labs(
title = "Uniquely Mapped Reads Percent per Sample",
x = "Sample ID",
y = "Uniquely Mapped Reads (%)"
) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1)  # Rotate x-axis labels
)+
ylim(0, 100)
plot <- ggplot(df, aes(x = SampleID, y = Uniquely.mapped.reads.percent)) +
geom_bar(stat = "identity") +
theme_bw() +  # White background
labs(
title = "Uniquely Mapped Reads Percent per Sample",
x = "Sample ID",
y = "Uniquely Mapped Reads (%)"
) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1)  # Rotate x-axis labels
)+
ylim(0, 100)
# Specify the output path
# output_path <- "C://Users/jonan/Documents/1Work/RoseLab/bulkRNAseq_32samples/Figures/final.log.out/unclean_unique_read_pct.png"
output_path <- "C://Users/jonan/Documents/1Work/RoseLab/bulkRNAseq_32samples/data/STAR_clean_fast/Figures/clean_unique_read_pct.png"
# output_path <- "C://Users/jonan/Documents/1Work/RoseLab/bulkRNAseq_32samples/Figures/final.log.out/unclean_subset_read_pct.png"
# Save the plot
ggsave(output_path, plot = plot, width = 10, height = 6, dpi = 300)
# Specify the output path
# output_path <- "C://Users/jonan/Documents/1Work/RoseLab/bulkRNAseq_32samples/Figures/final.log.out/unclean_unique_read_pct.png"
# output_path <- "C://Users/jonan/Documents/1Work/RoseLab/bulkRNAseq_32samples/data/STAR_clean_fast/Figures/clean_unique_read_pct.png"
output_path <- "C://Users/jonan/Documents/1Work/RoseLab/bulkRNAseq_32samples/Figures/fasp_star_clean/clean_unique_read_pct.png"
# output_path <- "C://Users/jonan/Documents/1Work/RoseLab/bulkRNAseq_32samples/Figures/final.log.out/unclean_subset_read_pct.png"
# Save the plot
ggsave(output_path, plot = plot, width = 10, height = 6, dpi = 300)
ggplot(df, aes(x = SampleID, y = Number.of.input.reads)) +
geom_bar(stat = "identity") +
theme_bw() +  # White background
labs(
title = "Uniquely Mapped Reads Percent per Sample",
x = "Sample ID",
y = "Uniquely Mapped Reads (%)"
) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1)  # Rotate x-axis labels
)+
ylim(0, 100)
#   "COH2233-23_Benign_NRT_0h",
#   "COH2233-23_Benign_RT_0h",
#   "COH22333-24_A+B_NRT_0h",
#   "COH22333-24_A+B_RT_0h",
#   "COH2233-22 Benign NRT 0h",
#   "COH2233-22 Tumor RT 2h"
# )
#
# # Subset the data frame to only include these SampleID values
# df <- df %>% filter(SampleID %in% sample_ids_to_plot)
df$Number.of.input.reads
#   "COH2233-23_Benign_NRT_0h",
#   "COH2233-23_Benign_RT_0h",
#   "COH22333-24_A+B_NRT_0h",
#   "COH22333-24_A+B_RT_0h",
#   "COH2233-22 Benign NRT 0h",
#   "COH2233-22 Tumor RT 2h"
# )
#
# # Subset the data frame to only include these SampleID values
# df <- df %>% filter(SampleID %in% sample_ids_to_plot)
df$Average.input.read.length
ggplot(df, aes(x = SampleID, y = Average.input.read.length)) +
geom_bar(stat = "identity") +
theme_bw() +  # White background
labs(
title = "Uniquely Mapped Reads Percent per Sample",
x = "Sample ID",
y = "Uniquely Mapped Reads (%)"
) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1)  # Rotate x-axis labels
)+
ylim(0, 100)
ggplot(df, aes(x = SampleID, y = Average.input.read.length)) +
geom_bar(stat = "identity") +
theme_bw() +  # White background
labs(
title = "Uniquely Mapped Reads Percent per Sample",
x = "Sample ID",
y = "Uniquely Mapped Reads (%)"
) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1)  # Rotate x-axis labels
)
# Specify the folder containing the files
folder_path <- "C:/Users/jonan/Documents/1Work/RoseLab/bulkRNAseq_32samples/data/STAR_clean_fast/ReadsPerGene/"
# List all files in the folder that match the pattern "ReadsPerGene.out.tab"
files <- list.files(folder_path, pattern = "ReadsPerGene.out.tab$", full.names = TRUE)
files
print("sample ID")
print(sample_id)
#----------------------Loading and Preparing Count matrix----------------------
# Function to load the second column (unstranded counts) from each file
load_counts <- function(file) {
# Extract the file name to be used as the column name
sample_id <- sub("ReadsPerGene.out.tab", "", basename(file))
print("sample ID")
print(sample_id)
# Read the data, skip the first 4 lines, use the first column as rownames
data <- read.table(file, header = FALSE, skip = 4, row.names = 1)
# Return only the unstranded counts (second column) as a data frame
unstranded_counts <- data.frame(data[, 1])
colnames(unstranded_counts) <- sample_id  # Rename the column with sample ID
return(unstranded_counts)
}
# Specify the folder containing the files
folder_path <- "C:/Users/jonan/Documents/1Work/RoseLab/bulkRNAseq_32samples/data/STAR_clean_fast/ReadsPerGene/"
# List all files in the folder that match the pattern "ReadsPerGene.out.tab"
files <- list.files(folder_path, pattern = "ReadsPerGene.out.tab$", full.names = TRUE)
# Load the counts for all files
all_counts <- lapply(files, load_counts)
#----------------------Loading and Preparing Count matrix----------------------
# Function to load the second column (unstranded counts) from each file
load_counts <- function(file) {
# Extract the file name to be used as the column name
sample_id <- sub("_ReadsPerGene.out.tab", "", basename(file))
print("sample ID")
print(sample_id)
# Read the data, skip the first 4 lines, use the first column as rownames
data <- read.table(file, header = FALSE, skip = 4, row.names = 1)
# Return only the unstranded counts (second column) as a data frame
unstranded_counts <- data.frame(data[, 1])
colnames(unstranded_counts) <- sample_id  # Rename the column with sample ID
return(unstranded_counts)
}
# Specify the folder containing the files
folder_path <- "C:/Users/jonan/Documents/1Work/RoseLab/bulkRNAseq_32samples/data/STAR_clean_fast/ReadsPerGene/"
# List all files in the folder that match the pattern "ReadsPerGene.out.tab"
files <- list.files(folder_path, pattern = "ReadsPerGene.out.tab$", full.names = TRUE)
# Load the counts for all files
all_counts <- lapply(files, load_counts)
all_counts
all_counts[1]
head(all_counts[1])
head(all_counts[1])
head(all_counts[[1]])
# Load the counts for all files
all_counts <- lapply(files, load_counts)
head(all_counts[[1]])
head(all_counts[[2]])
# Since rows are the same, bind them together by columns
combined_data <- do.call(cbind, all_counts)
files[1]
rownames(read.table(files[1], header = FALSE, skip = 4, row.names = 1))
# Use the rownames from one file for the gene IDs
gene_ids <- rownames(read.table(files[1], header = FALSE, skip = 4, row.names = 1))
rownames(combined_data) <- gene_ids
# Preparing Ensembl IDs (removing version numbers as before)
ensemble_ids <- gsub("\\.\\d+$", "", rownames(combined_data))
rownames(combined_data)
# Preparing Ensembl IDs
ensemble_ids <- gsub("\\.\\d+$", "", rownames(combined_data))
ensemble_ids
rownames(combined_data) <- gsub("\\.\\d+$", "", rownames(combined_data))
typeof(combined_data)
combined_data
combined_data <- data.frame(ensembl_gene_id = rownames(combined_data), combined_data)
typeof(combined_data)
combined_data
typeof(combined_data)
combined_data <- data.frame(ensembl_gene_id = rownames(combined_data), combined_data)
typeof(combined_data)
combined_data <- combined_data[!duplicated(combined_data$ensembl_gene_id), ]
View(combined_data)
# Use biomaRt to map Ensembl IDs to gene symbols
ensembl <- useMart("ensembl", dataset = "hsapiens_gene_ensembl")
# Get mappings from Ensembl IDs to gene symbols
gene_mapping <- getBM(
attributes = c("ensembl_gene_id", "hgnc_symbol"),
filters = "ensembl_gene_id",
values = ensemble_ids,
mart = ensembl
)
combined_data$ensembl_gene_id.1 <- NULL
library(biomaRt) # Converting ensembleID to geneID
combined_data$ensembl_gene_id.1 <- NULL
gene_mapping$hgnc_symbol
id_to_name
id_to_name['ENSG00000158062 ']
id_to_name['ENSG00000158062']
combined_data$ensembl_gene_id <- NULL
# Add a new column 'gene_symbols' based on row names and id_to_name mapping
combined_data$gene_symbols <- id_to_name[rownames(combined_data)]
head(combined_data)
head(combined_data)
head(combined_data$gene_symbols, n = 100)
# Display the first 100 rows with row names and gene_symbols column
head(data.frame(ensembl_id = rownames(combined_data), gene_symbols = combined_data$gene_symbols), n = 100)
dim(combined_data)
# Removing empty rows and duplicates
combined_data <- combined_data[!(is.na(combined_data$gene_symbols) | combined_data$gene_symbols == ""), ]
dim(combined_data)
combined_data <- combined_data[!duplicated(combined_data$gene_symbols), ]
dim(combined_data)
a <- combined_data
rownames(a) <- a$gene_symbols
#renaming the rows
rowname(combined_data) <- combined_data$gene_symbols
#renaming the rows
rownames(combined_data) <- combined_data$gene_symbols
install.packages('phyloseq')
BiocManager::install('phyloseq')
# Removing low quality reads
a <- combined_data
a[rowSums(a >= 30)]
# Removing low quality reads
a <- combined_data[0:20,]
a
a[rowSums(a >= 30)]
a[rowSums(a >= 30) >= 6,]
a
a[rowSums(a >= 30)]
rowSums(a >= 30)
#-------------Older stuff below-------------------
print('stop')
#-------------Older stuff below-------------------
print('stop')
a
rowSums(a >= 30)
a[rowSums(a >= 30) >=6]
a[rowSums(a >= 30) >=6, ]
rowSums(a >= 30)
# Removing low quality reads
a <- combined_data[0:50,]
rowSums(a >= 30)
# Removing low quality reads
a <- combined_data[0:100,]
rowSums(a >= 30)
dim(a[rowSums(a >= 30) >=6, ])
# Removing low quality reads
a <- combined_data
dim(a[rowSums(a >= 30) >=6, ])
# Removing low quality reads
combined_data <- combined_data[rowSums(a >= 30) >= 6, ]
combined_data
write.csv(combined_data, "C:/Users/jonan/Documents/1Work/RoseLab/bulkRNAseq_32samples/data/count_matrix_clean_fpStr.csv")
#----------------------Loading and Preparing Count matrix----------------------
# Function to load the second column (unstranded counts) from each file
load_counts <- function(file) {
# Extract the file name to be used as the column name
sample_id <- sub("_ReadsPerGene.out.tab", "", basename(file))
print("sample ID")
print(sample_id)
# Read the data, skip the first 4 lines, use the first column as rownames
data <- read.table(file, header = FALSE, skip = 4, row.names = 1)
# Return only the unstranded counts (second column) as a data frame
unstranded_counts <- data.frame(data[, 1])
colnames(unstranded_counts) <- sample_id  # Rename the column with sample ID
return(unstranded_counts)
}
gc()
#----------------------Loading and Preparing Count matrix----------------------
# Function to load the second column (unstranded counts) from each file
load_counts <- function(file) {
# Extract the file name to be used as the column name
sample_id <- sub("_ReadsPerGene.out.tab", "", basename(file))
print("sample ID")
print(sample_id)
# Read the data, skip the first 4 lines, use the first column as rownames
data <- read.table(file, header = FALSE, skip = 4, row.names = 1)
# Return only the unstranded counts (second column) as a data frame
unstranded_counts <- data.frame(data[, 1])
colnames(unstranded_counts) <- sample_id  # Rename the column with sample ID
return(unstranded_counts)
}
# Specify the folder containing the files
folder_path <- "C:/Users/jonan/Documents/1Work/RoseLab/bulkRNAseq_32samples/data/STAR_clean_fast/ReadsPerGene/"
# List all files in the folder that match the pattern "ReadsPerGene.out.tab"
files <- list.files(folder_path, pattern = "ReadsPerGene.out.tab$", full.names = TRUE)
# Load the counts for all files
all_counts <- lapply(files, load_counts)
# Since rows are the same, bind them together by columns
combined_data <- do.call(cbind, all_counts)
# Use the rownames from one file for the gene IDs
gene_ids <- rownames(read.table(files[1], header = FALSE, skip = 4, row.names = 1))
rownames(combined_data) <- gene_ids
# Preparing Ensembl IDs
ensemble_ids <- gsub("\\.\\d+$", "", rownames(combined_data))
rownames(combined_data) <- gsub("\\.\\d+$", "", rownames(combined_data))
combined_data <- combined_data[!duplicated(combined_data$ensembl_gene_id), ]
# Use biomaRt to map Ensembl IDs to gene symbols
ensembl <- useMart("ensembl", dataset = "hsapiens_gene_ensembl")
library(biomaRt) # Converting ensembleID to geneID
# Use biomaRt to map Ensembl IDs to gene symbols
ensembl <- useMart("ensembl", dataset = "hsapiens_gene_ensembl")
# Get mappings from Ensembl IDs to gene symbols
gene_mapping <- getBM(
attributes = c("ensembl_gene_id", "hgnc_symbol"),
filters = "ensembl_gene_id",
values = ensemble_ids,
mart = ensembl
)
# Create a mapping from Ensembl IDs to Gene Names
id_to_name <- setNames(gene_mapping$hgnc_symbol, gene_mapping$ensembl_gene_id)
# Add a new column 'gene_symbols' based on row names and id_to_name mapping
combined_data$gene_symbols <- id_to_name[rownames(combined_data)]
combined_data$gene_symbols <- NULL
View(combined_data)
View(combined_data)
View(combined_data)
#----------------------Loading and Preparing Count matrix----------------------
# Function to load the second column (unstranded counts) from each file
load_counts <- function(file) {
# Extract the file name to be used as the column name
sample_id <- sub("_ReadsPerGene.out.tab", "", basename(file))
# print("sample ID")
# print(sample_id)
# Read the data, skip the first 4 lines, use the first column as rownames
data <- read.table(file, header = FALSE, skip = 4, row.names = 1)
# Return only the unstranded counts (second column) as a data frame
unstranded_counts <- data.frame(data[, 1])
colnames(unstranded_counts) <- sample_id  # Rename the column with sample ID
return(unstranded_counts)
}
# Specify the folder containing the files
folder_path <- "C:/Users/jonan/Documents/1Work/RoseLab/bulkRNAseq_32samples/data/STAR_clean_fast/ReadsPerGene/"
# List all files in the folder that match the pattern "ReadsPerGene.out.tab"
files <- list.files(folder_path, pattern = "ReadsPerGene.out.tab$", full.names = TRUE)
# Load the counts for all files
all_counts <- lapply(files, load_counts)
# Since rows are the same, bind them together by columns
combined_data <- do.call(cbind, all_counts)
# Use the rownames from one file for the gene IDs
gene_ids <- rownames(read.table(files[1], header = FALSE, skip = 4, row.names = 1))
gene_ids
rownames(combined_data) <- gene_ids
rownames(combined_data) <- gene_ids
# Preparing Ensembl IDs
ensemble_ids <- gsub("\\.\\d+$", "", rownames(combined_data))
rownames(combined_data) <- gsub("\\.\\d+$", "", rownames(combined_data))
combined_data <- combined_data[!duplicated(combined_data$ensembl_gene_id), ]
# Use biomaRt to map Ensembl IDs to gene symbols
ensembl <- useMart("ensembl", dataset = "hsapiens_gene_ensembl")
# Get mappings from Ensembl IDs to gene symbols
gene_mapping <- getBM(
attributes = c("ensembl_gene_id", "hgnc_symbol"),
filters = "ensembl_gene_id",
values = ensemble_ids,
mart = ensembl
)
# Create a mapping from Ensembl IDs to Gene Names
id_to_name <- setNames(gene_mapping$hgnc_symbol, gene_mapping$ensembl_gene_id)
View(combined_data)
# Since rows are the same, bind them together by columns
combined_data <- do.call(cbind, all_counts)
# Use the rownames from one file for the gene IDs
gene_ids <- rownames(read.table(files[1], header = FALSE, skip = 4, row.names = 1))
rownames(combined_data) <- gene_ids
# Preparing Ensembl IDs
ensemble_ids <- gsub("\\.\\d+$", "", rownames(combined_data))
rownames(combined_data) <- gsub("\\.\\d+$", "", rownames(combined_data))
combined_data <- combined_data[!duplicated(combined_data$ensembl_gene_id), ]
# Since rows are the same, bind them together by columns
combined_data <- do.call(cbind, all_counts)
# Use the rownames from one file for the gene IDs
gene_ids <- rownames(read.table(files[1], header = FALSE, skip = 4, row.names = 1))
rownames(combined_data) <- gene_ids
# Preparing Ensembl IDs
ensemble_ids <- gsub("\\.\\d+$", "", rownames(combined_data))
rownames(combined_data) <- gsub("\\.\\d+$", "", rownames(combined_data))
rownames(combined_data)
id_to_name
# Add a new column 'gene_symbols' based on row names and id_to_name mapping
combined_data$gene_symbols <- id_to_name[rownames(combined_data)]
combined_data$gene_symbols
head(combined_data)
# Removing empty rows and duplicates
dim(combined_data) #58721
combined_data <- combined_data[!(is.na(combined_data$gene_symbols) | combined_data$gene_symbols == ""), ]
dim(combined_data) #40882
# Removing empty rows and duplicates
dim(combined_data) #58721
combined_data <- combined_data[!duplicated(combined_data$gene_symbols), ]
dim(combined_data) #40865
# Removing low quality reads
combined_data <- combined_data[rowSums(a >= 30) >= 6, ]
# Removing low quality reads
combined_data <- combined_data[rowSums(combined_data >= 30) >= 6, ]
write.csv(combined_data, "C:/Users/jonan/Documents/1Work/RoseLab/bulkRNAseq_32samples/data/count_matrix_clean_fpStr.csv")
t
library(biomaRt) # Converting ensembleID to geneID
#----------------------Loading and Preparing Count matrix----------------------
# Function to load the second column (unstranded counts) from each file
load_counts <- function(file) {
# Extract the file name to be used as the column name
sample_id <- sub("_ReadsPerGene.out.tab", "", basename(file))
# print("sample ID")
# print(sample_id)
# Read the data, skip the first 4 lines, use the first column as rownames
data <- read.table(file, header = FALSE, skip = 4, row.names = 1)
# Return only the unstranded counts (second column) as a data frame
unstranded_counts <- data.frame(data[, 1])
colnames(unstranded_counts) <- sample_id  # Rename the column with sample ID
return(unstranded_counts)
}
# Specify the folder containing the files
folder_path <- "C:/Users/jonan/Documents/1Work/RoseLab/bulkRNAseq_32samples/data/STAR_clean_fast/ReadsPerGene/"
# List all files in the folder that match the pattern "ReadsPerGene.out.tab"
files <- list.files(folder_path, pattern = "ReadsPerGene.out.tab$", full.names = TRUE)
# Load the counts for all files
all_counts <- lapply(files, load_counts)
# Since rows are the same, bind them together by columns
combined_data <- do.call(cbind, all_counts)
# Use the rownames from one file for the gene IDs
gene_ids <- rownames(read.table(files[1], header = FALSE, skip = 4, row.names = 1))
rownames(combined_data) <- gene_ids
#----------------------Loading and Preparing Count matrix----------------------
# Function to load the second column (unstranded counts) from each file
load_counts <- function(file) {
# Extract the file name to be used as the column name
sample_id <- sub("_ReadsPerGene.out.tab", "", basename(file))
# print("sample ID")
# print(sample_id)
# Read the data, skip the first 4 lines, use the first column as rownames
data <- read.table(file, header = FALSE, skip = 4, row.names = 1)
# Return only the unstranded counts (second column) as a data frame
unstranded_counts <- data.frame(data[, 1])
colnames(unstranded_counts) <- sample_id  # Rename the column with sample ID
return(unstranded_counts)
}
# Specify the folder containing the files
folder_path <- "C:/Users/jonan/Documents/1Work/RoseLab/bulkRNAseq_32samples/data/STAR_clean_fast/ReadsPerGene/"
# List all files in the folder that match the pattern "ReadsPerGene.out.tab"
files <- list.files(folder_path, pattern = "ReadsPerGene.out.tab$", full.names = TRUE)
# Load the counts for all files
all_counts <- lapply(files, load_counts)
# Since rows are the same, bind them together by columns
combined_data <- do.call(cbind, all_counts)
# Use the rownames from one file for the gene IDs
gene_ids <- rownames(read.table(files[1], header = FALSE, skip = 4, row.names = 1))
rownames(combined_data) <- gene_ids
# Preparing Ensembl IDs
ensemble_ids <- gsub("\\.\\d+$", "", rownames(combined_data))
rownames(combined_data) <- gsub("\\.\\d+$", "", rownames(combined_data))
# Use biomaRt to map Ensembl IDs to gene symbols
ensembl <- useMart("ensembl", dataset = "hsapiens_gene_ensembl")
# Create a mapping from Ensembl IDs to Gene Names
id_to_name <- setNames(gene_mapping$hgnc_symbol, gene_mapping$ensembl_gene_id)
# Add a new column 'gene_symbols' based on row names and id_to_name mapping
combined_data$gene_symbols <- id_to_name[rownames(combined_data)]
combined_data$gene_symbols
# Removing empty rows and duplicates
dim(combined_data) #58721
combined_data <- combined_data[!(is.na(combined_data$gene_symbols) | combined_data$gene_symbols == ""), ]
dim(combined_data) #40882
combined_data <- combined_data[!duplicated(combined_data$gene_symbols), ]
dim(combined_data) #40865
#renaming the rows
rownames(combined_data) <- combined_data$gene_symbols
# Removing low quality reads
combined_data <- combined_data[rowSums(combined_data >= 30) >= 6, ]
write.csv(combined_data, "C:/Users/jonan/Documents/1Work/RoseLab/bulkRNAseq_32samples/data/count_matrix_clean_fpStr.csv")
CountMatrix_loc <- "C:/Users/jonan/Documents/1Work/RoseLab/bulkRNAseq_32samples/data/count_matrix_clean_fpStr.csv"
CountMatrix_loc <- "C:/Users/jonan/Documents/1Work/RoseLab/bulkRNAseq_32samples/data/count_matrix_clean_fpStr.csv"
ct_mtx <- read.csv(CountMatrix_loc, header = TRUE, row.names = 1)
