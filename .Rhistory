# Removing empty and NA genesymbol entries
results <- subset(results, !(is.na(external_gene_name) | external_gene_name == ""))
#Renaming column
colnames(results)[colnames(results) == "external_gene_name"] <- "GeneName"
#Reordering the columns
results <- results[, c("GeneName", setdiff(names(results), "GeneName"))]
# Calculate the negative log10 of the p-values for plotting
results$neg_log10_pvalue <- -log10(results$pvalue)
results$neg_log10_Adjpvalue <- -log10(results$padj)
write.csv(results, "../Data/ForReview/DESeqResults_No_ABDG032.csv", row.names = FALSE)
# Filtering for significant genes based on pvalue
sigGenes_p <- subset(results, pvalue <= 0.05)
sigGenes_p <- sigGenes_p[order(sigGenes_p$pvalue),]
# Filtering for significant genes based on adjusted pvalue
sigGenes_padj <- subset(results, padj <= 0.1)
sigGenes_padj <- sigGenes_padj[order(sigGenes_padj$pvalue),]
dim(sigGenes_p)
dim(sigGenes_padj)
write.csv(results, "../Data/DGE_Results_No_ABDG032.csv", row.names = FALSE)
write.csv(sigGenes_p, file = "../Data/DGE_sig_genes_p_No_ABDG032.csv", row.names = FALSE)
write.csv(sigGenes_padj, file = "../Data/DGE_sig_genes_adjp_No_ABDG032.csv", row.names = FALSE)
# Extracting expression values from DESeqDataSet
expression_values <- assay(dds, "counts")
# Creating a dataframe
gene_expression_data <- as.data.frame(expression_values)
gene_expression_data$EnsembleID <- rownames(gene_expression_data)
# Removing the version number from EnsembleID using regex
gene_expression_data$EnsembleID <- gsub("\\.\\d+$", "", gene_expression_data$EnsembleID)
# Connect to the Ensembl database using biomaRt
ensembl <- useMart("ensembl", dataset = "hsapiens_gene_ensembl")
# Connect to the Ensembl database using biomaRt
ensembl <- useMart("ensembl", dataset = "hsapiens_gene_ensembl")
# Convert Ensemble IDs to ensembl_gene_id Gene IDs
converted_ids <- getBM(attributes = c("ensembl_gene_id", "external_gene_name"),
filters = "ensembl_gene_id",
values = gene_expression_data$EnsembleID,
mart = ensembl)
# Merge the converted IDs with your gene expression data
gene_expression_data <- merge(gene_expression_data, converted_ids, by.x = "EnsembleID", by.y = "ensembl_gene_id")
# Convert Ensemble IDs to ensembl_gene_id Gene IDs
converted_ids <- getBM(attributes = c("ensembl_gene_id", "external_gene_name"),
filters = "ensembl_gene_id",
values = gene_expression_data$EnsembleID,
mart = ensembl)
# Merge the converted IDs with your gene expression data
gene_expression_data <- merge(gene_expression_data, converted_ids, by.x = "EnsembleID", by.y = "ensembl_gene_id")
# Removing empty and NA genesymbol entries
gene_expression_data <- subset(gene_expression_data, !(is.na(external_gene_name) | external_gene_name == ""))
dim(converted_ids)
head(converted_ids)
# Check names of gene_expression_data after merge
names(gene_expression_data)
head(converted_ids)
dim(converted_ids)
head(converted_ids)
names(gene_expression_data)
knitr::opts_chunk$set(echo = TRUE)
setwd("/Users/jonan/Documents/Tyseq/Code/") #All file locations will have a relative directionality in the file tree.
library(tximport) # Importing salmon files and preparing for deseq
library(DESeq2) # DGE Analysis
library(GenomicFeatures) # Generating the tx2gene
library(ggplot2)
library(tidyr)
library(tidyverse)
library(fgsea) # pathway enrichment analysis
library(biomaRt) # Converting ensembleID to geneID
library(data.table)
library(plotly)
library(dplyr)
tx2gene <- read.csv("../Data/tx2gene.csv")
# txdb <- makeTxDbFromGFF("../Data/hg19/gencode.v19.chr_patch_hapl_scaff.annotation.gtf")
#
# # keytypes(txdb)
# k <- keys(txdb, keytype = "TXNAME")
#
# tx2gene <- AnnotationDbi::select(txdb, k, "GENEID", "TXNAME")
# tx2gene <- as.data.frame(tx2gene)
# tx2gene <- tx2gene[, c("TXNAME", "GENEID")]
# write.csv(tx2gene, file = "../Data/tx2gene.csv", row.names = FALSE)
# Setting up files for upload
# "../Data/SalmonQuant/quantALL/"
control_files = c("../Data/SalmonQuant/quantALL/1_XIN460_NHI_ATTACT_L005_R1_001_quant.sf",
"../Data/SalmonQuant/quantALL/2_XGM061_NHI_TCCGGA_L005_R1_001_quant.sf",
"../Data/SalmonQuant/quantALL/3_XJL334_NHI_CGCTCA_L005_R1_001_quant.sf",
"../Data/SalmonQuant/quantALL/4_ZCA126_NHI_GAGATT_L005_R1_001_quant.sf",
"../Data/SalmonQuant/quantALL/5_XGZ492_NHI_ATTCAG_L005_R1_001_quant.sf")
T1D_files = c("../Data/SalmonQuant/quantALL/6_AAFS251_T2DHI_GAATTC_L005_R1_001_quant.sf",
"../Data/SalmonQuant/quantALL/7_AAJ2482_T2DHI_CTGAAG_L005_R1_001_quant.sf",
"../Data/SalmonQuant/quantALL/8_AABW178_T2DHI_TAATGC_L005_R1_001_quant.sf",
"../Data/SalmonQuant/quantALL/9_XIX456_T2DHI_CGGCTA_L005_R1_001_quant.sf"
)
# Creating a sample table that maps each sample to its corresponding quant.sf file
# _C = control
# _D = Diabetic
sample_table <- data.frame(
sampleName = c("XIN460_C", "XGM061_C", "XJL334_C", "ZCA126_C", "XGZ492_C",
"AAFS251_D", "AAJ2482_D", "AABW178_D", "XIX456_D"),
fileName = c(control_files, T1D_files),
diabetes_status = c(rep("No", 5), rep("Yes", 4))
)
length(control_files)  # should be 5
length(T1D_files)      # should be 4
length(sample_table$sampleName)  # should be 9
# import salmon abundance counts into an r data ckass that can be used by desseq
txi <- tximport(files = sample_table$fileName, type = "salmon", tx2gene = tx2gene, ignoreAfterBar = TRUE)
counts <- round(txi$counts)
dim(counts)
# Calculate the number of samples in which each gene is expressed for each group
expressed_control <- rowSums(counts[, sample_table$diabetes_status == "No"] > 0)
expressed_diabetes <- rowSums(counts[, sample_table$diabetes_status == "Yes"] > 0)
# Filter genes based on the 80% criterion for each group
keep_genes <- (expressed_control >= floor(0.8 * sum(sample_table$diabetes_status == "No"))) |
(expressed_diabetes >= floor(0.8 * sum(sample_table$diabetes_status == "Yes")))
# Apply the filter to the counts matrix
filtered_counts <- counts[keep_genes, ]
# dim(filtered_counts)
columnData <- data.frame(condition = sample_table$diabetes_status)
dds <- DESeqDataSetFromMatrix(countData = filtered_counts, colData = columnData, design = ~condition) # ~condition is what tells it that I am interested in seeing the relationships based on condition
#Adding the right column names to the dds object
colnames(dds) <- sample_table$sampleName
# dds$condition - These should match with colnames(dds); they do.
## Normalizing the counts
# Estimated size factors are determined by the library size
dds <- estimateSizeFactors(dds)
# Differential gene expression analysis
dds <- DESeq(dds)
# Getting the results based on the condition of diabetes or not
results <- results(dds, contrast = c("condition", "Yes", "No"))
# dim(results)
dds <- DESeqDataSetFromMatrix(countData = filtered_counts, colData = columnData, design = ~condition) # ~condition is what tells it that I am interested in seeing the relationships based on condition
#Adding the right column names to the dds object
colnames(dds) <- sample_table$sampleName
# dds$condition - These should match with colnames(dds); they do.
## Normalizing the counts
# Estimated size factors are determined by the library size
dds <- estimateSizeFactors(dds)
# Extract and save normalized counts
norm_counts <- counts(dds, normalized=TRUE)
# Preparing Ensembl IDs (removing version numbers as before)
ensembl_ids <- gsub("\\.\\d+$", "", rownames(norm_counts))
rownames(norm_counts) <- gsub("\\.\\d+$", "", rownames(norm_counts))
# Connecting to Ensembl and retrieve gene names
ensembl <- useMart("ensembl", dataset = "hsapiens_gene_ensembl")
converted_ids <- getBM(attributes = c("ensembl_gene_id", "external_gene_name"),
filters = "ensembl_gene_id",
values = ensembl_ids,
mart = ensembl)
# Create a mapping from Ensembl IDs to Gene Names
id_to_name <- setNames(converted_ids$external_gene_name, converted_ids$ensembl_gene_id)
# Replace row names in norm_counts with gene names, using Ensembl IDs as keys
norm_counts_rownames <- rownames(norm_counts)
rownames(norm_counts) <- ifelse(norm_counts_rownames %in% names(id_to_name), id_to_name[norm_counts_rownames], NA)
dim(norm_counts)
# Filter out rows where row names are NA or empty
norm_counts <- norm_counts[!is.na(rownames(norm_counts)) & rownames(norm_counts) != "", ]
rownames(norm_counts)
# Save the updated norm_counts data frame
write.csv(norm_counts, "../Data/normalized_gene_expression_data_No_ABDG032.csv", row.names = TRUE)
# write.csv(norm_counts, "../Data/normalized_gene_expression_data.csv", row.names = TRUE)
#Rownames to a column
results <- as.data.frame(results)
results$EnsembleID <- rownames(results)
# Removing the version number from EnsembleID using regex
results$EnsembleID <- gsub("\\.\\d+$", "", results$EnsembleID)
## Obtaining gene ID
# Connect to the Ensembl database using biomaRt
ensembl <- useMart("ensembl", dataset = "hsapiens_gene_ensembl")
# Convert Ensemble IDs to ensembl_gene_id Gene IDs
converted_ids <- getBM(attributes = c("ensembl_gene_id", "external_gene_name"),
filters = "ensembl_gene_id",
values = results$EnsembleID,
mart = ensembl)
# Merge the converted IDs with gene expression data
results <- merge(results, converted_ids, by.x = "EnsembleID", by.y = "ensembl_gene_id")
#the dimensions of results went from 15295 x 7 to 14962 x 8
# dim(results)
# Removing empty and NA genesymbol entries
results <- subset(results, !(is.na(external_gene_name) | external_gene_name == ""))
# dim(results)
#Renaming column
colnames(results)[colnames(results) == "external_gene_name"] <- "GeneName"
#Reordering the columns
results <- results[, c("GeneName", setdiff(names(results), "GeneName"))]
# Calculate the negative log10 of the p-values for plotting
results$neg_log10_pvalue <- -log10(results$pvalue)
results$neg_log10_Adjpvalue <- -log10(results$padj)
write.csv(results, "../Data/ForReview/DESeqResults_No_ABDG032.csv", row.names = FALSE)
# write.csv(results, "../Data/ForReview/DESeqResults.csv", row.names = FALSE)
# Filtering for significant genes based on pvalue
sigGenes_p <- subset(results, pvalue <= 0.05)
sigGenes_p <- sigGenes_p[order(sigGenes_p$pvalue),]
# Filtering for significant genes based on adjusted pvalue
sigGenes_padj <- subset(results, padj <= 0.1)
sigGenes_padj <- sigGenes_padj[order(sigGenes_padj$pvalue),]
dim(sigGenes_p)
dim(sigGenes_padj)
# Saving all df's
# write.csv(results, "../Data/DGE_Results.csv", row.names = FALSE)
# write.csv(sigGenes_p, file = "../Data/DGE_sig_genes_p.csv", row.names = FALSE)
# write.csv(sigGenes_padj, file = "../Data/DGE_sig_genes_adjp.csv", row.names = FALSE)
write.csv(results, "../Data/DGE_Results_No_ABDG032.csv", row.names = FALSE)
write.csv(sigGenes_p, file = "../Data/DGE_sig_genes_p_No_ABDG032.csv", row.names = FALSE)
write.csv(sigGenes_padj, file = "../Data/DGE_sig_genes_adjp_No_ABDG032.csv", row.names = FALSE)
# Extracting expression values from DESeqDataSet
expression_values <- assay(dds, "counts")
# Creating a dataframe
gene_expression_data <- as.data.frame(expression_values)
gene_expression_data$EnsembleID <- rownames(gene_expression_data)
# Removing the version number from EnsembleID using regex
gene_expression_data$EnsembleID <- gsub("\\.\\d+$", "", gene_expression_data$EnsembleID)
## Obtaining gene ID
# Connect to the Ensembl database using biomaRt
ensembl <- useMart("ensembl", dataset = "hsapiens_gene_ensembl")
# Convert Ensemble IDs to ensembl_gene_id Gene IDs
converted_ids <- getBM(attributes = c("ensembl_gene_id", "external_gene_name"),
filters = "ensembl_gene_id",
values = gene_expression_data$EnsembleID,
mart = ensembl)
# Merge the converted IDs with your gene expression data
gene_expression_data <- merge(gene_expression_data, converted_ids, by.x = "EnsembleID", by.y = "ensembl_gene_id")
# Removing empty and NA genesymbol entries
gene_expression_data <- subset(gene_expression_data, !(is.na(external_gene_name) | external_gene_name == ""))
# write.csv(gene_expression_data, "../Data/ExpressionData_filtered.csv")
write.csv(gene_expression_data, "../Data/ExpressionData_filtered_No_ABDG032.csv")
dim(converted_ids)
head(converted_ids)
# Check names of gene_expression_data after merge
names(gene_expression_data)
# Checking to see that the right columns are associated to the right patient ID
# Get the column names from DESeq object
col_names = colnames(dds)
# Get the patient IDs from the sample table
patient_ids <- sample_table$sampleName
# Compare the column names with the sample name
# If match
match_result <- match(col_names, patient_ids)
match_result
# Print the results
for (i in seq_along(col_names)) {
cat("Column:", col_names[i], " - SampleName ID:", patient_ids[match_result[i]], "\n")
}
library(dplyr)
library(pheatmap)
library(RColorBrewer)
library(ggplot2)
setwd("/Users/jonan/Documents/Tyseq/Code/")
results = read.csv("../Data/DGE_Results_No_ABDG032.csv.csv") # Results  from DGE analysis
fig_width= 10
fig_height = 10
volcano_pvalue <- ggplot(results, aes(x = log2FoldChange, y = neg_log10_pvalue)) +
geom_point(color = "grey", alpha = 0.6) +
geom_point(data = subset(results, pvalue < 0.05 & abs(log2FoldChange) > 1),
color = "red", alpha = 0.6) +
geom_vline(xintercept = c(-1, 1), linetype = "dashed", color = "blue") +
geom_hline(yintercept = -log10(0.05), linetype = "dashed", color = "blue") +
labs(x = "log2 Fold Change", y = "-log10(p-value)",
title = "Volcano Plot") +
theme_bw()
# ggsave(filename = "../Figures/volcano_pvalue.pdf",
ggsave(filename = "../Figures/ForReviewer/volcano_pvalue.pdf",
plot = volcano_pvalue,
width = fig_width, height = fig_height, dpi = 600)
# ggsave(filename = "../Figures//volcano_pvalue.png",
ggsave(filename = "../Figures/ForReviewer/volcano_pvalue.png",
plot = volcano_pvalue,
width = fig_width, height = fig_height, dpi = 600)
# ggsave(filename = "../Figures/volcano_pvalue.pdf",
ggsave(filename = "../Figures/ForReviewer/volcano_pvalue.pdf",
plot = volcano_pvalue,
width = fig_width, height = fig_height, dpi = 600)
#Subset top up/down regulated genes
Upregulated_Genes <- subset(results, log2FoldChange > 0 )
Downregualted_Genes <- subset(results, log2FoldChange < 0)
# Select the top 10 upregulated and top 10 downregulated genes
top_upregulated <- Upregulated_Genes[order(Upregulated_Genes$padj, na.last = NA)[1:10],]
top_downregulated <- Downregualted_Genes[order(Downregualted_Genes$padj, na.last = NA)[1:1],]
# Combine the two dataframes
selection <- rbind(top_upregulated, top_downregulated)
# Create a volcano plot
volcano_plot_adjusted <-  ggplot(results, aes(x = log2FoldChange, y = -log10(padj))) +
geom_point(color = "grey", alpha = 0.6) +
geom_point(data = subset(results, padj < 0.05 & abs(log2FoldChange) > 1),
color = "red", alpha = 0.6) +
geom_vline(xintercept = c(-1, 1), linetype = "dashed", color = "blue") +
geom_hline(yintercept = -log10(0.05), linetype = "dashed", color = "blue") +
# Adding the text labels for the top genes
geom_text(data = selection, aes(label = GeneName),
vjust = -1, hjust = 1) +
labs(x = "log2 Fold Change", y = "-log10(adjusted p-value)",
title = "Volcano Plot") +
theme_bw()
ggsave(filename = "../Figures/ForReviewer/volcano_adj_labeled.png", plot = volcano_plot_adjusted,
width = fig_width, height = fig_height, dpi = 600)
ggsave(filename = "../Figures/ForReviewer/volcano_adj_labeled.pdf", plot = volcano_plot_adjusted,
width = fig_width, height = fig_height, dpi = 600)
#####
#-----------------------------------------------------------------------------#
#                               HEAT MAP
#-----------------------------------------------------------------------------#
# Load data
sigGenes_padj <- read.csv("../Data/DGE_sig_genes_adjp_No_ABDG032.csv")
#Removing duplicate row names
dfnorm <- read.csv("../Data/normalized_gene_expression_data_No_ABDG032.csv", check.names = FALSE)
rownames(dfnorm) <- make.names(dfnorm[,1], unique=TRUE)
dfnorm <- dfnorm[, -1] # Remove the first column
dfhm <- dfnorm[rownames(dfnorm) %in% sigGenes_padj$GeneName, ]
# Convert to matrix if not already
dfhm_matrix <- as.matrix(dfhm)
#Sample table from DGE_Analysis
# "../Data/SalmonQuant/quantALL/"
control_files = c("../Data/SalmonQuant/quantALL/1_XIN460_NHI_ATTACT_L005_R1_001_quant.sf",
"../Data/SalmonQuant/quantALL/2_XGM061_NHI_TCCGGA_L005_R1_001_quant.sf",
"../Data/SalmonQuant/quantALL/3_XJL334_NHI_CGCTCA_L005_R1_001_quant.sf",
"../Data/SalmonQuant/quantALL/4_ZCA126_NHI_GAGATT_L005_R1_001_quant.sf",
"../Data/SalmonQuant/quantALL/5_XGZ492_NHI_ATTCAG_L005_R1_001_quant.sf")
T1D_files = c("../Data/SalmonQuant/quantALL/6_AAFS251_T2DHI_GAATTC_L005_R1_001_quant.sf",
"../Data/SalmonQuant/quantALL/7_AAJ2482_T2DHI_CTGAAG_L005_R1_001_quant.sf",
"../Data/SalmonQuant/quantALL/8_AABW178_T2DHI_TAATGC_L005_R1_001_quant.sf",
"../Data/SalmonQuant/quantALL/9_XIX456_T2DHI_CGGCTA_L005_R1_001_quant.sf")
# Creating a sample table that maps each sample to its corresponding quant.sf file
# _C = control
# _D = Diabetic
sample_table <- data.frame(
sampleName = c("XIN460_C", "XGM061_C", "XJL334_C", "ZCA126_C", "XGZ492_C",
"AAFS251_D", "AAJ2482_D", "AABW178_D", "XIX456_D"),# "ABDG032_D"),
fileName = c(control_files, T1D_files),
diabetes_status = c(rep("No", 5), rep("Yes",4))) #, 5)))
# Assuming you have a dataframe named 'sample_table' with sample conditions
# Create a simple group annotation based on your sample data
# This part needs actual sample condition data
# Example if 'sample_table' has columns 'sampleName' and 'diabetes_status':
groups <- sample_table$diabetes_status
names(groups) <- sample_table$sampleName
# Assuming 'groups' vector has your samples' conditions
grpann <- data.frame(Group = groups)
# Check the unique levels in your 'Group' annotation
unique_groups <- unique(grpann$Group)
print(unique_groups)
rownames(grpann) <- names(groups)
# Map "No" to "Non-diabetic" and "Yes" to "Diabetic" for display in the heatmap
grpann$DisplayGroup <- ifelse(grpann$Group == "No", "Non-diabetic", "Diabetic")
# Update annCol to use the new labels
annCol <- list(DisplayGroup = c("Non-diabetic" = "blue", "Diabetic" = "red"))
#Removing the control and diabetic labels
colnames(dfhm_matrix) <- gsub("_[CD]$", "", colnames(dfhm_matrix))
# Generate heatmap
pheatmap(dfhm_matrix,
color=colorRampPalette(rev(brewer.pal(n=11, name="RdBu")))(100),
scale="row",
clustering_method="ward.D2",
annotation_col=grpann["DisplayGroup"],  # Use only the DisplayGroup column for annotations
annotation_colors=annCol,
filename="../Figures/heatmap_FDR.png", #png
# filename="../Figures/heatmap_FDR.pdf", #pdf
width=10, height=8, dpi=600)
# Generate heatmap
pheatmap(dfhm_matrix,
color=colorRampPalette(rev(brewer.pal(n=11, name="RdBu")))(100),
scale="row",
clustering_method="ward.D2",
annotation_col=grpann["DisplayGroup"],  # Use only the DisplayGroup column for annotations
annotation_colors=annCol,
filename="../Figures/ForReviewer/heatmap_FDR.png", #png
# filename="../Figures/heatmap_FDR.pdf", #pdf
width=10, height=8, dpi=600)
# results <- read.csv("../Data/DGE_Results.csv")
results <- read.csv("../Data/DGE_Results_No_ABDG032.csv")
library(fgsea) # pathway enrichment analysis
library(biomaRt) # Converting ensembleID to geneID
library(data.table)
library(plotly)
library(dplyr)
library(tidyr)
library(stringr) # for cleaning gense set names
# results <- read.csv("../Data/DGE_Results.csv")
results <- read.csv("../Data/DGE_Results_No_ABDG032.csv")
# results <- read.csv("../Data/DGE_Results.csv")
results <- read.csv("../Data/DGE_Results_No_ABDG032.csv")
# Cleaning and Preparing data
```{r ranka and dfGSEA generation}
results
results_clean
# Removing rows with na values in them
results_clean <- results %>% drop_na(log2FoldChange, pvalue)
# Calculating gene rankings
results_clean <- results_clean %>% mutate(rank = log2FoldChange * -log10(pvalue))
# Creating a new dataframe with the necessary columns
dfGSEA <- results_clean %>%
select(GeneName, log2FC = log2FoldChange, pvalue, rank)
# Extract gene rank and list in decreasing order for GSEA
ranks <- as.numeric(dfGSEA$rank)
names(ranks) <- dfGSEA$GeneName
ranks <- sort(ranks, decreasing=TRUE)
# Identify duplicates
duplicates <- names(ranks)[duplicated(names(ranks)) | duplicated(names(ranks), fromLast = TRUE)]
print(duplicates)
# Retain the highest value among duplicates
ranks_unique <- tapply(ranks, INDEX = names(ranks), FUN = max)
# Import .gmt file with pathway information by gene symbol (Gene sets derived from the GO Biological Process ontology)
## Obtained from GSEA 3-6-2023 http://www.gsea-msigdb.org/gsea/msigdb/collections.jsp
go <- gmtPathways("C:/Users/jonan/Documents/Tyseq/Data/c5.go.v2023.1.Hs.symbols.gmt")
set.seed(06212022)
fgseaRes <- fgsea(pathways = go,
stats = ranks_unique,
minSize=6,
maxSize=500,
nproc=1)
#ssorting by pvalue
fgseaRes <- fgseaRes[order(fgseaRes$pval), ]
# Convert the lists to comma-separated strings
fgseaRes$leadingEdge <- sapply(fgseaRes$leadingEdge, paste, collapse = ",")
# # Save the modified dataframe to a CSV file
write.csv(fgseaRes, "C:/Users/jonan/Documents/Tyseq/Data/For_Reviewer_Response/GSEA_Results/fgseaResults_with_strings_filtered.csv", row.names = FALSE)
# Write cleaned table
write.csv(top, "C:/Users/jonan/Documents/Tyseq/Data/For_Reviewer_Response/GSEA_Results/Top_GSEA_Pathways_GO_filtered.csv")
# Select top 10 up and down-regulated pathways
topup <- fgseaRes %>% filter(ES > 0)
topup <- topup[order(topup$pval),]
topup <- topup[1:10,]
topdown <- fgseaRes %>% filter(ES < 0)
topdown <- topdown[order(topdown$pval),]
topdown <- topdown[1:10,]
top <- rbind(topup, rev(topdown))
# Clean up pathway names
top$pathway <- top$pathway %>% str_replace("GO.+?_", "") %>% str_replace_all("_", " ")
top <- top[order(top$pval),]
top <- top %>% filter(pval<=0.05) %>% filter(!is.na(pathway))
# Write cleaned table
write.csv(top, "C:/Users/jonan/Documents/Tyseq/Data/For_Reviewer_Response/GSEA_Results/Top_GSEA_Pathways_GO_filtered.csv")
# Summarize pathway information and create negative log p value variable for graphing
pathg <- top %>% filter(pval <= 0.1)
pathg <- pathg %>% mutate(neglogpvalue = -log10(pval))
# Summarize pathway information and create negative log p value variable for graphing
pathg <- top %>% filter(pval <= 0.1)
pathg <- pathg %>% mutate(neglogpvalue = -log10(pval))
if (nrow(pathg) >= 1) {
# Graph pathways by p value
pathfig <- ggplot(pathg, aes(x = reorder(pathway, neglogpvalue), y = neglogpvalue)) +
# Conditionally set fill color based on the "ES" value
geom_bar(aes(fill = ifelse(ES < 0, "red", "black")), stat = "identity") +
coord_flip() +
scale_x_discrete(name = "Pathways Associated with Diabetes") +
scale_fill_identity() +  # Ensure the colors are applied as specified
ylab("-log(p value)") +
theme(axis.text.x = element_text(face = "bold", size = 10, angle = 0),
axis.text.y = element_text(face = "bold", size = 10, angle = 0))
pathfig
# Save the figure with increased width (e.g., width = 10 inches)
# ggsave("C:/Users/jonan/Documents/Tyseq/Figures/Up-Down_GO_pathways.png", width = 12)
ggsave("../Data/For_Reviewer_Response/GSEA_Results/Up-Down_GO_pathways2.png", width = 12, dpi = 300)
# ggsave("../Data/ForReview/Up-Down_GO_pathways2.png", width = 12, dpi = 300)
}
# Import .gmt file with pathway information by gene symbol (Gene sets derived from the GO Biological Process ontology)
## Obtained from GSEA 3-6-2023 http://www.gsea-msigdb.org/gsea/msigdb/collections.jsp
KEGG <- gmtPathways("C:/Users/jonan/Documents/Tyseq/Data/c2.cp.kegg.v2023.1.Hs.symbols.gmt")
set.seed(06212022)
fgseaRes_kegg <- fgsea(pathways = KEGG,
stats = ranks_unique,
minSize=6,
maxSize=500,
nproc=1)
SigPath = subset(fgseaRes_kegg, pval <= 0.05)
pSigPath = subset(fgseaRes_kegg, padj <= 0.1)
dim(SigPath)
dim(pSigPath)
#ssorting by pvalue
fgseaRes_kegg <- fgseaRes_kegg[order(fgseaRes_kegg$pval), ]
# Convert the lists to comma-separated strings
fgseaRes_kegg$leadingEdge <- sapply(fgseaRes_kegg$leadingEdge, paste, collapse = ",")
# # Save the modified dataframe to a CSV file
write.csv(fgseaRes_kegg, "C:/Users/jonan/Documents/Tyseq/Data/For_Reviewer_Response/GSEA_Results/KEGG/fgseaResults_with_strings_filtered.csv", row.names = FALSE)
# write.csv(fgseaRes_kegg, "C:/Users/jonan/Documents/Tyseq/Data/fgseaResults_with_strings_filtered.csv", row.names = FALSE)
#
# # Read back in the table
# EAResults <- read.csv("C:/Users/jonan/Documents/Tyseq/Data/fgseaResults_with_strings.csv")
# Select top 10 up and down-regulated pathways
topup <- fgseaRes_kegg %>% filter(ES > 0)
topup <- topup[order(topup$pval),]
topup <- topup[1:10,]
topdown <- fgseaRes_kegg %>% filter(ES < 0)
topdown <- topdown[order(topdown$pval),]
topdown <- topdown[1:10,]
top_kegg <- rbind(topup, rev(topdown))
# Clean up pathway names
top_kegg$pathway <- top_kegg$pathway %>% str_replace("KEGG+?_", "") %>% str_replace_all("_", " ")
top_kegg <- top_kegg[order(top_kegg$pval),]
top_kegg <- top_kegg %>% filter(pval<=0.05) %>% filter(!is.na(pathway))
# Write cleaned table
# write_csv(top_kegg, "C:/Users/jonan/Documents/Tyseq/Data/ForReview/top_kegg_GSEA_Pathways_KEGG.csv")
write_csv(top_kegg, "C:/Users/jonan/Documents/Tyseq/Data/For_Reviewer_Response/GSEA_Results/KEGG/top_kegg_GSEA_Pathways_KEGG.csv")
# Summarize pathway information and create negative log p value variable for graphing
pathg <- top_kegg %>% filter(pval <= 0.1)
pathg <- pathg %>% mutate(neglogpvalue = -log10(pval))
if (nrow(pathg) >= 1) {
# Graph pathways by p value
pathfig <- ggplot(pathg, aes(x = reorder(pathway, neglogpvalue), y = neglogpvalue)) +
# Conditionally set fill color based on the "ES" value
geom_bar(aes(fill = ifelse(ES < 0, "red", "black")), stat = "identity") +
coord_flip() +
scale_x_discrete(name = "Pathways Associated with Diabetes") +
scale_fill_identity() +  # Ensure the colors are applied as specified
ylab("-log(p value)") +
theme(axis.text.x = element_text(face = "bold", size = 10, angle = 0),
axis.text.y = element_text(face = "bold", size = 10, angle = 0))
pathfig
# Save the figure with increased width (e.g., width = 10 inches)
# ggsave("C:/Users/jonan/Documents/Tyseq/Figures/Up-Down_KEGG_pathways.png", width = 12)
# ggsave("../Data/ForReview/Up-Down_KEGG_pathways.png", width = 12, dpi = 300)
ggsave("../Data/For_Reviewer_Response/GSEA_Results/KEGG/Up-Down_KEGG_pathways.png", width = 12, dpi = 300)
}
top_upregulated
dfhm_matrix
